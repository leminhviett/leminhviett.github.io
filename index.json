[{"content":"What is CORS?  CORS stands for Cross-Origin Resource Sharing. CORS is HTTP-header based mechanism set by server to inform client side about allowed origins (\u0026lt;scheme\u0026gt;://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;) other than its own. It also indicates method and headers which the server is willing to support (example included below). Most of client browsers enforce CORS whenever a cross-origin request is made. A request is cross-origin if it calls to outside origins, which are different from the one served the first resource.  CORS behaviour will be different between simple \u0026amp; ‚Äúpre-flighted‚Äù requests. Let‚Äôs see the detail below.\nSimple requests   Refer here for full definition of simple request. For example, a GET request with no header is a simple request.\n  A simple request is sent directly to server. Let‚Äôs see how it works in the example below:\n Request 1: Client browser first load a web document from domain-a.com . The main request defines its origin as domain-a.com. This origin is then specified in the request header of subsequent requests. Origin: \u0026lt;origin\u0026gt;  Request 2: Client browser then send request to GET resource from domain-a.com. As comming from the same origin, the requested resource is fetched \u0026amp; rendered by browser. Request 3: similar to request 2**,** but the request now is sent to domain-b.com , which is a different origin.  The resource will be successfully fetched, but \u0026hellip; It might be rendered by the browser only if in the response header, the allowed origin == domain-a.com (the request origin) or when it is a wildcard (*) meaning permit all origin.  Access-Control-Allow-Origin: \u0026lt;origin\u0026gt; | *     ‚ÄúPre-flighted‚Äù requests   Any requests that are not simple is ‚Äúpre-flighted‚Äù one.\n  Unlike simple request, the browser will send a ‚Äúpreflight‚Äù request (OPTION method) to see if the actual one (‚Äùpre-flighted‚Äù one) is allowed by the server.\n  A preflight request will include the following headers:\nOrigin: \u0026lt;origin\u0026gt; Access-Control-Request-Method: \u0026lt;method\u0026gt; Access-Control-Request-Headers: \u0026lt;field-name\u0026gt;[, \u0026lt;field-name\u0026gt;]*  To inform server about method and headers used in the actual request. To ask if the server allow client origin with given headers \u0026amp; method.    Server responses with the following headers if it supports:\nAccess-Control-Allow-Origin: \u0026lt;origin\u0026gt; | * Access-Control-Allow-Methods: \u0026lt;method\u0026gt;[, \u0026lt;method\u0026gt;]* Access-Control-Allow-Headers: \u0026lt;header-name\u0026gt;[, \u0026lt;header-name\u0026gt;]* Indicating origin, method \u0026amp; headers the server supports\n  Then, the browser will compare value in the response header against corresponding info of the actual request. If all is allowed, the actual request is sent; otherwise, not.\n  The preflight request can also be cached in client side with the time-to-live indicated in Access-Control-Max-Age response header\n  Final note CORS is server-side security configurations that¬†clients may enforce it.\n Most browsers do (to avoid attack like CSRF). Some dev tools do not (like Postman).  Further reading \u0026amp; references: This article just covers surface of CORS. Further reading is highly recommended!\n Detailed visualization example: https://www.youtube.com/watch?v=Ka8vG5miErk\u0026amp;t=621s Further analysis: https://www.stackhawk.com/blog/what-is-cors/ Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS  ","permalink":"https://vietmle.com/posts/min_cors/","summary":"CORS mechanism \u0026amp; examples","title":"The minimum every developer must know about CORS"},{"content":"Who am I? Hi there üëã . I am Viet-Minh Le (@vietmle_).\n üéì¬†Information Engineering \u0026amp; Media \u0026lsquo;22 @ NTU üíº¬†Backend Engineer @ ShopeeSG üßëüèª‚Äçüíª Tech stacks: .py, .go, .js , and some more \u0026hellip;  Why I start this blog? As a non-CS degree person, I find it overwhelmed when self-studying to become a software engineer. I was lucky enough to be guided by my senior, since then my studying process is much easier.\nAs a result, I start this blog to share my coding journey and hope some of my articles help you in some ways as well.\nMoreover, through this blog, I also hope that I can connect with and learn from new like-minded friends like you.\n_Follow me (@vietmle_) on Twitter to get update whenever my new article is out!_\n","permalink":"https://vietmle.com/posts/about_me/","summary":"About me \u0026amp; my blog","title":"About me"}]